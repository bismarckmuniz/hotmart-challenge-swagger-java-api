/*
 * hotmart-challenge
 * Especificação da API Hotmart Challenge
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bismarck@ufmg.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorReturn;
import io.swagger.client.model.SalesManReturn;
import io.swagger.client.model.SalesReturn;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesApi {
    private ApiClient apiClient;

    public SalesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletarVenda
     * @param salesCode Código do Vedas (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletarVendaCall(Integer salesCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales"
            .replaceAll("\\{" + "salesCode" + "\\}", apiClient.escapeString(salesCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletarVendaValidateBeforeCall(Integer salesCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesCode' is set
        if (salesCode == null) {
            throw new ApiException("Missing the required parameter 'salesCode' when calling deletarVenda(Async)");
        }
        

        com.squareup.okhttp.Call call = deletarVendaCall(salesCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletar venda
     * Deletar venda
     * @param salesCode Código do Vedas (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletarVenda(Integer salesCode) throws ApiException {
        deletarVendaWithHttpInfo(salesCode);
    }

    /**
     * Deletar venda
     * Deletar venda
     * @param salesCode Código do Vedas (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletarVendaWithHttpInfo(Integer salesCode) throws ApiException {
        com.squareup.okhttp.Call call = deletarVendaValidateBeforeCall(salesCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletar venda (asynchronously)
     * Deletar venda
     * @param salesCode Código do Vedas (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletarVendaAsync(Integer salesCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletarVendaValidateBeforeCall(salesCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getConsultarVenda
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendaCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultarVendaValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConsultarVendaCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recupera a lista geral de vendas
     * Recupera a lista de vendas
     * @return SalesReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesReturn getConsultarVenda() throws ApiException {
        ApiResponse<SalesReturn> resp = getConsultarVendaWithHttpInfo();
        return resp.getData();
    }

    /**
     * Recupera a lista geral de vendas
     * Recupera a lista de vendas
     * @return ApiResponse&lt;SalesReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesReturn> getConsultarVendaWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConsultarVendaValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SalesReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recupera a lista geral de vendas (asynchronously)
     * Recupera a lista de vendas
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendaAsync(final ApiCallback<SalesReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultarVendaValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsultarVendasId
     * @param idSalesman  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendasIdCall(Integer idSalesman, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales/{IdSalesman}"
            .replaceAll("\\{" + "IdSalesman" + "\\}", apiClient.escapeString(idSalesman.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultarVendasIdValidateBeforeCall(Integer idSalesman, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idSalesman' is set
        if (idSalesman == null) {
            throw new ApiException("Missing the required parameter 'idSalesman' when calling getConsultarVendasId(Async)");
        }
        

        com.squareup.okhttp.Call call = getConsultarVendasIdCall(idSalesman, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Buscar informações da lista de vendas por id
     * Buscar informações da lista de vendas por id
     * @param idSalesman  (required)
     * @return SalesManReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesManReturn getConsultarVendasId(Integer idSalesman) throws ApiException {
        ApiResponse<SalesManReturn> resp = getConsultarVendasIdWithHttpInfo(idSalesman);
        return resp.getData();
    }

    /**
     * Buscar informações da lista de vendas por id
     * Buscar informações da lista de vendas por id
     * @param idSalesman  (required)
     * @return ApiResponse&lt;SalesManReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesManReturn> getConsultarVendasIdWithHttpInfo(Integer idSalesman) throws ApiException {
        com.squareup.okhttp.Call call = getConsultarVendasIdValidateBeforeCall(idSalesman, null, null);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Buscar informações da lista de vendas por id (asynchronously)
     * Buscar informações da lista de vendas por id
     * @param idSalesman  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendasIdAsync(Integer idSalesman, final ApiCallback<SalesManReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultarVendasIdValidateBeforeCall(idSalesman, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCadastrarVendas
     * @param salesMan Nome do vendedor (required)
     * @param buyer Nome do comprador (required)
     * @param product Nome do produto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCadastrarVendasCall(String salesMan, String buyer, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (salesMan != null)
        localVarHeaderParams.put("salesMan", apiClient.parameterToString(salesMan));
        if (buyer != null)
        localVarHeaderParams.put("buyer", apiClient.parameterToString(buyer));
        if (product != null)
        localVarHeaderParams.put("product", apiClient.parameterToString(product));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCadastrarVendasValidateBeforeCall(String salesMan, String buyer, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesMan' is set
        if (salesMan == null) {
            throw new ApiException("Missing the required parameter 'salesMan' when calling postCadastrarVendas(Async)");
        }
        
        // verify the required parameter 'buyer' is set
        if (buyer == null) {
            throw new ApiException("Missing the required parameter 'buyer' when calling postCadastrarVendas(Async)");
        }
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling postCadastrarVendas(Async)");
        }
        

        com.squareup.okhttp.Call call = postCadastrarVendasCall(salesMan, buyer, product, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Salva a vendas
     * Salva a vendas
     * @param salesMan Nome do vendedor (required)
     * @param buyer Nome do comprador (required)
     * @param product Nome do produto (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postCadastrarVendas(String salesMan, String buyer, String product) throws ApiException {
        postCadastrarVendasWithHttpInfo(salesMan, buyer, product);
    }

    /**
     * Salva a vendas
     * Salva a vendas
     * @param salesMan Nome do vendedor (required)
     * @param buyer Nome do comprador (required)
     * @param product Nome do produto (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postCadastrarVendasWithHttpInfo(String salesMan, String buyer, String product) throws ApiException {
        com.squareup.okhttp.Call call = postCadastrarVendasValidateBeforeCall(salesMan, buyer, product, null, null);
        return apiClient.execute(call);
    }

    /**
     * Salva a vendas (asynchronously)
     * Salva a vendas
     * @param salesMan Nome do vendedor (required)
     * @param buyer Nome do comprador (required)
     * @param product Nome do produto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCadastrarVendasAsync(String salesMan, String buyer, String product, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCadastrarVendasValidateBeforeCall(salesMan, buyer, product, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putAlterarVendas
     * @param salesCode Código do Vedas (required)
     * @param product Nome do produto (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAlterarVendasCall(Integer salesCode, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales"
            .replaceAll("\\{" + "salesCode" + "\\}", apiClient.escapeString(salesCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (product != null)
        localVarHeaderParams.put("product", apiClient.parameterToString(product));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAlterarVendasValidateBeforeCall(Integer salesCode, String product, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesCode' is set
        if (salesCode == null) {
            throw new ApiException("Missing the required parameter 'salesCode' when calling putAlterarVendas(Async)");
        }
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling putAlterarVendas(Async)");
        }
        

        com.squareup.okhttp.Call call = putAlterarVendasCall(salesCode, product, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Alterar a lista de vendas
     * Alterar a lista de vendas
     * @param salesCode Código do Vedas (required)
     * @param product Nome do produto (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putAlterarVendas(Integer salesCode, String product) throws ApiException {
        putAlterarVendasWithHttpInfo(salesCode, product);
    }

    /**
     * Alterar a lista de vendas
     * Alterar a lista de vendas
     * @param salesCode Código do Vedas (required)
     * @param product Nome do produto (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putAlterarVendasWithHttpInfo(Integer salesCode, String product) throws ApiException {
        com.squareup.okhttp.Call call = putAlterarVendasValidateBeforeCall(salesCode, product, null, null);
        return apiClient.execute(call);
    }

    /**
     * Alterar a lista de vendas (asynchronously)
     * Alterar a lista de vendas
     * @param salesCode Código do Vedas (required)
     * @param product Nome do produto (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAlterarVendasAsync(Integer salesCode, String product, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAlterarVendasValidateBeforeCall(salesCode, product, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
