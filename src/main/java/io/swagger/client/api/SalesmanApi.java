/*
 * hotmart-challenge
 * API Hotmart Challenge
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bismarck@ufmg.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorReturn;
import io.swagger.client.model.SalesManReturn;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesmanApi {
    private ApiClient apiClient;

    public SalesmanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesmanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deletarVendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletarVendedorCall(Integer salesManCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Salesman"
            .replaceAll("\\{" + "salesManCode" + "\\}", apiClient.escapeString(salesManCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletarVendedorValidateBeforeCall(Integer salesManCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesManCode' is set
        if (salesManCode == null) {
            throw new ApiException("Missing the required parameter 'salesManCode' when calling deletarVendedor(Async)");
        }
        

        com.squareup.okhttp.Call call = deletarVendedorCall(salesManCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletar cadastro de vendedor
     * Deletar produto
     * @param salesManCode C贸digo do Vedendor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletarVendedor(Integer salesManCode) throws ApiException {
        deletarVendedorWithHttpInfo(salesManCode);
    }

    /**
     * Deletar cadastro de vendedor
     * Deletar produto
     * @param salesManCode C贸digo do Vedendor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletarVendedorWithHttpInfo(Integer salesManCode) throws ApiException {
        com.squareup.okhttp.Call call = deletarVendedorValidateBeforeCall(salesManCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletar cadastro de vendedor (asynchronously)
     * Deletar produto
     * @param salesManCode C贸digo do Vedendor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletarVendedorAsync(Integer salesManCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletarVendedorValidateBeforeCall(salesManCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getConsultarVendedor
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendedorCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Salesman";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultarVendedorValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConsultarVendedorCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recupera a lista geral de vendedores
     * Recupera a lista de vendedores
     * @return SalesManReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesManReturn getConsultarVendedor() throws ApiException {
        ApiResponse<SalesManReturn> resp = getConsultarVendedorWithHttpInfo();
        return resp.getData();
    }

    /**
     * Recupera a lista geral de vendedores
     * Recupera a lista de vendedores
     * @return ApiResponse&lt;SalesManReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesManReturn> getConsultarVendedorWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConsultarVendedorValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recupera a lista geral de vendedores (asynchronously)
     * Recupera a lista de vendedores
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendedorAsync(final ApiCallback<SalesManReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultarVendedorValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsultarVendedorId
     * @param idSalesMan  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendedorIdCall(Integer idSalesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Salesman/{IdSalesMan}"
            .replaceAll("\\{" + "IdSalesMan" + "\\}", apiClient.escapeString(idSalesMan.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultarVendedorIdValidateBeforeCall(Integer idSalesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idSalesMan' is set
        if (idSalesMan == null) {
            throw new ApiException("Missing the required parameter 'idSalesMan' when calling getConsultarVendedorId(Async)");
        }
        

        com.squareup.okhttp.Call call = getConsultarVendedorIdCall(idSalesMan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Buscar informa莽玫es cadastro de vendedor por id
     * Buscar informa莽玫es de produtos por id
     * @param idSalesMan  (required)
     * @return SalesManReturn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalesManReturn getConsultarVendedorId(Integer idSalesMan) throws ApiException {
        ApiResponse<SalesManReturn> resp = getConsultarVendedorIdWithHttpInfo(idSalesMan);
        return resp.getData();
    }

    /**
     * Buscar informa莽玫es cadastro de vendedor por id
     * Buscar informa莽玫es de produtos por id
     * @param idSalesMan  (required)
     * @return ApiResponse&lt;SalesManReturn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalesManReturn> getConsultarVendedorIdWithHttpInfo(Integer idSalesMan) throws ApiException {
        com.squareup.okhttp.Call call = getConsultarVendedorIdValidateBeforeCall(idSalesMan, null, null);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Buscar informa莽玫es cadastro de vendedor por id (asynchronously)
     * Buscar informa莽玫es de produtos por id
     * @param idSalesMan  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsultarVendedorIdAsync(Integer idSalesMan, final ApiCallback<SalesManReturn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultarVendedorIdValidateBeforeCall(idSalesMan, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalesManReturn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCadastrarVendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCadastrarVendedorCall(Integer salesManCode, String salesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Salesman"
            .replaceAll("\\{" + "salesManCode" + "\\}", apiClient.escapeString(salesManCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (salesMan != null)
        localVarHeaderParams.put("salesMan", apiClient.parameterToString(salesMan));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCadastrarVendedorValidateBeforeCall(Integer salesManCode, String salesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesManCode' is set
        if (salesManCode == null) {
            throw new ApiException("Missing the required parameter 'salesManCode' when calling postCadastrarVendedor(Async)");
        }
        
        // verify the required parameter 'salesMan' is set
        if (salesMan == null) {
            throw new ApiException("Missing the required parameter 'salesMan' when calling postCadastrarVendedor(Async)");
        }
        

        com.squareup.okhttp.Call call = postCadastrarVendedorCall(salesManCode, salesMan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Salvar cadastro de vendedor
     * Salvar cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postCadastrarVendedor(Integer salesManCode, String salesMan) throws ApiException {
        postCadastrarVendedorWithHttpInfo(salesManCode, salesMan);
    }

    /**
     * Salvar cadastro de vendedor
     * Salvar cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postCadastrarVendedorWithHttpInfo(Integer salesManCode, String salesMan) throws ApiException {
        com.squareup.okhttp.Call call = postCadastrarVendedorValidateBeforeCall(salesManCode, salesMan, null, null);
        return apiClient.execute(call);
    }

    /**
     * Salvar cadastro de vendedor (asynchronously)
     * Salvar cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCadastrarVendedorAsync(Integer salesManCode, String salesMan, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCadastrarVendedorValidateBeforeCall(salesManCode, salesMan, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putAlterarVendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAlterarVendedorCall(Integer salesManCode, String salesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Salesman"
            .replaceAll("\\{" + "salesManCode" + "\\}", apiClient.escapeString(salesManCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (salesMan != null)
        localVarHeaderParams.put("salesMan", apiClient.parameterToString(salesMan));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAlterarVendedorValidateBeforeCall(Integer salesManCode, String salesMan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesManCode' is set
        if (salesManCode == null) {
            throw new ApiException("Missing the required parameter 'salesManCode' when calling putAlterarVendedor(Async)");
        }
        
        // verify the required parameter 'salesMan' is set
        if (salesMan == null) {
            throw new ApiException("Missing the required parameter 'salesMan' when calling putAlterarVendedor(Async)");
        }
        

        com.squareup.okhttp.Call call = putAlterarVendedorCall(salesManCode, salesMan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Alterar o cadastro de vendedor
     * Alterar o cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putAlterarVendedor(Integer salesManCode, String salesMan) throws ApiException {
        putAlterarVendedorWithHttpInfo(salesManCode, salesMan);
    }

    /**
     * Alterar o cadastro de vendedor
     * Alterar o cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putAlterarVendedorWithHttpInfo(Integer salesManCode, String salesMan) throws ApiException {
        com.squareup.okhttp.Call call = putAlterarVendedorValidateBeforeCall(salesManCode, salesMan, null, null);
        return apiClient.execute(call);
    }

    /**
     * Alterar o cadastro de vendedor (asynchronously)
     * Alterar o cadastro de vendedor
     * @param salesManCode C贸digo do Vedendor (required)
     * @param salesMan Nome do vendedor (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAlterarVendedorAsync(Integer salesManCode, String salesMan, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAlterarVendedorValidateBeforeCall(salesManCode, salesMan, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
